# -*- coding: utf-8 -*-
"""Meta_data_task.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nq0pxEVSXjU9esolXo5Q1Br24uaCI0XZ
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler, OneHotEncoder, LabelEncoder
from sklearn.compose import ColumnTransformer
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.model_selection import train_test_split
from google.colab import drive
import missingno as msno
import joblib
import os
drive.mount('/content/drive')

data = pd.read_csv('/content/drive/MyDrive/Deployment_project/HAM10000_metadata.csv')

data.isna().sum()
data = data.dropna(subset=['age'])



# Features and target
X = data[['age', 'sex', 'localization']]
y = data['dx']

# Encode target
label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(y)

# Train / Val / Test split (70/15/15)
X_train, X_temp, y_train, y_temp = train_test_split(
    X, y_encoded, test_size=0.3, random_state=42, stratify=y_encoded
)
X_val, X_test, y_val, y_test = train_test_split(
    X_temp, y_temp, test_size=0.5, random_state=42, stratify=y_temp
)

# Preprocessing numeric and categorical features
preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), ['age']),
        ('cat', OneHotEncoder(handle_unknown='ignore'), ['sex', 'localization'])
    ]
)

X_train = preprocessor.fit_transform(X_train)
X_val   = preprocessor.transform(X_val)
X_test  = preprocessor.transform(X_test)

cat_encoder = preprocessor.named_transformers_['cat']
cat_encoder.categories_
localizations = cat_encoder.categories_[1]
for idx, loc in enumerate(localizations):
    print(f"Column {idx} â†’ {loc}")

clf = RandomForestClassifier(n_estimators=200, random_state=42)
clf.fit(X_train, y_train)

# Validation performance
val_preds = clf.predict(X_val)
val_acc = accuracy_score(y_val, val_preds)
print("Validation Accuracy:", val_acc)

test_preds = clf.predict(X_test)
test_acc = accuracy_score(y_test, test_preds)
print("Test Accuracy:", test_acc)

print(classification_report(y_test, test_preds, target_names=label_encoder.classes_))

# Probability predictions for the test set
probs_test = clf.predict_proba(X_test)  # shape: (num_samples, num_classes)

# predicted class and probability for first test sample
sample_pred_class = probs_test[0].argmax()
sample_pred_prob  = probs_test[0][sample_pred_class]
print("Predicted class:", label_encoder.inverse_transform([sample_pred_class])[0])
print("Predicted probability:", sample_pred_prob)

save_dir = '/content/drive/MyDrive/Deployment_project/models/'
model_path = os.path.join(save_dir, "metadata_model.pkl")
joblib.dump(clf, model_path)

joblib.dump(preprocessor, "/content/drive/MyDrive/Deployment_project/models/meta_preprocessor.pkl")